make之前，chmod 777 mkreleasehdr.sh，会生成下列文件
redis-benchmark		// 性能测试工具
redis-check-aof		// AOF文件修复工具
redis-check-rdb		// RDB文件检查工具（快照持久化文件）
redis-cli			// 命令行客户端
redis-server		// redis服务器启动命令

./redis-server ***.conf				指定配置打开一个redis服务
./redis-server --port 6666 			指定端口号打开一个redis服务
./redis-cli -h 主机IP -p 端口号		连接指定的redis服务器

第一部分、数据结构与对象
(1)简单动态字符串
redis自己构建了一种名为简单动态字符串SDS的抽象类型，key就是这种类型
SET msg "hello world" : key是一个保存着"msg"的SDS对象，value是一个保存着"hello world"的SDS对象
RPUSH fruits "apple" "banana" "cherry" : key是一个保存着"fruits"的SDS对象，value保存着一个列表对象，内含三个SDS
此外，SDS还用做AOF中的缓冲区
struct sdshdr {
    int len;	 // buf 中已占用空间的长度，不包括'\0'
    int free;    // buf 中剩余可用空间的长度
    char buf[];  // 数据空间（字节数组，是二进制数据，不由'\0'来判断结束）
};
1.该结构的优点：
获取字符串长度O(1),而C数组获取字符串长度O(N)
字符串操作前，只要检测free和lenth就知道，缓冲区是否足够，这样子可以避免缓冲区溢出
由于free区的存在，整个SDS，不用反复的对数组空间进行分配、释放
内存的扩充策略：小于SDS_MAX_PREALLOC (1024*1024)，则翻倍+1，需要长度加上SDS_MAX_PREALLOC+1，+1是给"\0"的
惰性空间释放策略：因为字符串缩减后，保留着，用free记录
---------------------------------------------------------------------------------------------------------
(2)链表
1.LLEN key 							// 返回列表key的长度
2.RPUSH/LPUSH key [value...]		// 在列表的右边|左边加入元素
3.LRANGE key index-start index-end	// 返回列表key[index-start]~key[index-end]的所有元素
typedef struct listNode {
    struct listNode *prev;	// 前置节点
    struct listNode *next;	// 后置节点 
    void *value;			// 节点的值
} listNode;
typedef struct list {
	// 双端无环
    listNode *head;							// 表头节点
    listNode *tail;							// 表尾节点
	// 三个函数指针，用以实现多态，设定特定函数
    void *(*dup)(void *ptr);				// 节点值复制函数
    void (*free)(void *ptr);				// 节点值释放函数
    int (*match)(void *ptr, void *key);		// 节点值对比函数
    unsigned long len;						// 链表所包含的节点数量
} list;
--------------------------------------------------------------------------------------------------------------
(3)字典（符号表、关联数组、映射）：一种用于保存键值对的抽象数据结构
1.HLEN key 				// 获取一个哈希表的键值对个数
2.HGETALL key			// 获取一个哈希表中的所有键值
typedef struct dictEntry {
    void *key;							// 键
    union {
        void *val;
        uint64_t u64;
        int64_t s64;
    } v;								// 值
    struct dictEntry *next;				// 指向下个哈希表节点，形成链表
} dictEntry;
typedef struct dictht {
    dictEntry **table;					// 哈希表数组
    unsigned long size;					// 哈希表大小
    unsigned long sizemask;				// 哈希表大小掩码，用于计算索引值，总是等于size - 1
    unsigned long used;					// 该哈希表已有节点的数量
} dictht;
typedef struct dictType {
    unsigned int (*hashFunction)(const void *key);							// 计算哈希值的函数
    void *(*keyDup)(void *privdata, const void *key);						// 复制键的函数
    void *(*valDup)(void *privdata, const void *obj);						// 复制值的函数
    int (*keyCompare)(void *privdata, const void *key1, const void *key2);	// 对比键的函数
    void (*keyDestructor)(void *privdata, void *key);						// 销毁键的函数
    void (*valDestructor)(void *privdata, void *obj);						// 销毁值的函数
} dictType;
typedef struct dict {
    dictType *type;				// 类型特定函数
    void *privdata;				// 私有数据
    dictht ht[2];				// 哈希表ht[0]被使用，ht[1]在rehash时使用
    int rehashidx;  			// rehash 索引，当 rehash 不在进行时，值为 -1
    int iterators; 				// 目前正在运行的安全迭代器的数量
} dict;
hash = dict->type->hashFunction(k0);
index = hash & dict->ht[0].sizemask;  // 采用链地址发法，解决键冲突
3.rehash策略
收缩、扩展原则，都是：ht[1]大小为第一个大于或等于ht[0].used*2的（2的n次方幂）
然后ht[0]上的所有键值对，rehash到ht[1]上
释放ht[0],将ht[1]设置为ht[0]，并在ht[1]新创建一个空白哈希表，为下次rehash做准备
4.何时收缩或扩展
负载因子load_factor = ht[0].used / ht[0].size
①未执行BGSAVE或者BGREWRITEAOF，负载因子>=1，扩展
②正在执行BGSAVE或者BGREWRITEAOF，负载因子>=5，扩展
③负载因子<0.1，收缩
5.rehash是渐进式的，数据很多时，一次性操作十分耗时，分摊到对字典的每个添加、删除、查找操作上，
------------------------------------------------------------------------------------------------------------
(4)跳跃表
ZADD salary 2000 tom
ZADD salary 5000 jack		// 有序集合中添加两个成员，各自具有一个价值
ZCARD salary				// 有序集合的元素个数
ZRANGE salary index-start index-end [WITHSCORES]	// 输出有序集合的index-start到index-end，带有价值
在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值却可以是相同的。
typedef struct zskiplistNode {
    robj *obj;							// 成员对象
    double score;						// 分值
    struct zskiplistNode *backward;		// 后退指针
    struct zskiplistLevel {				
        struct zskiplistNode *forward;	// 前进指针
        unsigned int span;				// 跨度
    } level[];							// 层(1-32的随机数)
} zskiplistNode;
typedef struct zskiplist {
    struct zskiplistNode *header, *tail;	// 表头节点和表尾节点
    unsigned long length;					// 表中节点的数量
    int level;								// 表中层数最大的节点的层数
} zskiplist;								
---------------------------------------------------------------------------------------------------------------
(5)整数集合
SADD numbers 1 3 5 7 9			// 创建一个集合，有5个元素
typedef struct intset {
    uint32_t encoding;		// 编码方式
    uint32_t length;		// 集合包含的元素数量
    int8_t contents[];		// 保存元素的数组
} intset;
虽然intset结构将contents属性声明为int8_t，实际上其类型由encoding决定
encoding=INTSET_ENC_INT16、INTSET_ENC_INT32、INTSET_ENC_INT64，对应int16_t、int32_t、int64_t
存在升级操作，当一个新加入数是int64_t，其它数据也被升级到int64_t（节约内存），但是不再降级
该新加入元素，小于所有现有元素，放开头；新加入元素，大于所有现有元素，放结尾
--------------------------------------------------------------------------------------------------------------
(6)压缩列表（ziplist）
当一个列表键只包含少量列表项，并且每个列表要么就是小整数值，要么就是长度较短的字符串，那么就使用压缩列表来实现
RPUSH lst 1 3 5 10086 "hello" "world"
HMSET profile "name" "Jack" "age" 28 "job" "Programmer"		// 往一个列表中加入多个键值对
非空 ziplist 示例图

area        |<---- ziplist header ---->|<----------- entries ------------->|<-end->|

size          4 bytes  4 bytes  2 bytes    ?        ?        ?        ?     1 byte
            +---------+--------+-------+--------+--------+--------+--------+-------+
component   | zlbytes | zltail | zllen | entry1 | entry2 |  ...   | entryN | zlend |
            +---------+--------+-------+--------+--------+--------+--------+-------+
                                       ^                          ^        ^
address                                |                          |        |
                                ZIPLIST_ENTRY_HEAD                |   ZIPLIST_ENTRY_END
                                                                  |
                                                        ZIPLIST_ENTRY_TAIL
*/
typedef struct zlentry {
    // prevrawlen ：前置节点的长度; prevrawlensize ：编码 prevrawlen 所需的字节大小
    unsigned int prevrawlensize, prevrawlen;
    unsigned int lensize, len;			// len ：当前节点值的长度; lensize ：编码 len 所需的字节大小
    unsigned int headersize;			// 当前节点 header 的大小; 等于 prevrawlensize + lensize
    unsigned char encoding;				// 当前节点值所使用的编码类型
    unsigned char *p;					// 指向当前节点的指针
} zlentry;
上述紧凑的结构，对压缩链表的增加元素、删除元素，将引发连锁更新
--------------------------------------------------------------------------------------------------------------
(7)对象
Redis并没有直接使用(1)-(6)的数据结构来实现键值对数据库，而是基于这些数据结构，创建了一个对象系统。
其中包含对象有：字符串对象、列表对象、哈希对象、集合对象、有序集合对象
此外，Redis对象系统还实现了，基于引用计数的内存回收机制，当程序不再使用某个对象时，对象所占用的内存会被自动释放
typedef struct redisObject {
    unsigned type:4;				// 类型
    unsigned encoding:4;			// 编码
    unsigned lru:REDIS_LRU_BITS; 	// 对象最后一次被访问的时间
    int refcount;					// 引用计数
    void *ptr;						// 指向实际值的指针
} robj;
对于数据库保存的键值对来说，键总是一个字符串对象，而值可以是字符串对象、列表对象、哈希对象、集合对象、有序集合对象
type = REDIS_STRING、REDIS_LIST、REDIS_HASH、REDIS_SET、REDIS_ZSET
TYPE msg		// 指令返回msg键，对应值的对象类型（string、list、hash、set、zset）
encoding 类型定义如下
#define REDIS_ENCODING_RAW 0     /* Raw representation 简单动态字符串*/		<->REDIS_STRING
#define REDIS_ENCODING_INT 1     /* Encoded as integer long类型整数*/	<->REDIS_STRING
#define REDIS_ENCODING_HT 2      /* Encoded as hash table 字典*/	<->REDIS_HASH、REDIS_SET
#define REDIS_ENCODING_ZIPMAP 3  /* Encoded as zipmap 其实质是用一个字符串数组来依次保存key和value*/
#define REDIS_ENCODING_LINKEDLIST 4 /* Encoded as regular linked list 双端链表*/	<->REDIS_LIST
#define REDIS_ENCODING_ZIPLIST 5 /* Encoded as ziplist 压缩列表*/	<->REDIS_LIST、REDIS_HASH、REDIS_ZSET
#define REDIS_ENCODING_INTSET 6  /* Encoded as intset 整数集合*/	<->REDIS_SET
#define REDIS_ENCODING_SKIPLIST 7  /* Encoded as skiplist 跳跃表和字典*/	<->REDIS_ZSET
#define REDIS_ENCODING_EMBSTR 8  /* Embedded sds string encoding embstr编码的简单动态字符串*/	<->REDIS_STRING
OBJECT ENCODING msg	
//指令返回msg键，对应值的编码类型（int、embstr、raw、hashtable、linkedlist、ziplist、intset、skiplist）
//以上type和encoding的实现，极大地提升了Redis的灵活性和效率
OBJECT REFCOUNT msg		// 返回对象的引用计数
OBJECT IDLETIME	msg		// 返回对象有多久没被使用过了
1.字符串对象（string）：可以使用int，raw，embstr来实现
embstr实现将raw实现的中两次分配操作（redisObject和sdshdr），合并为一次，内存是连续的，提高了效率
对embstr字符串执行任何修改命令时，程序会先将对象编码从embstr->raw
SET、GET、APPEND、INCRBYFLOAT、INCRBY、DECRBY、STRLEN、
SETRANGE key offset value、GETRANGE key start end
2.列表对象（list）：可以使用ziplist或者linkedlist来实现
①列表对象保存的所有字符串元素的长度都小于64字节  &  ②列表对象保存的元素数量小于512，才使用ziplist实现
上限值可修改，在list-max-ziplist-value和list-max-ziplist-entries
当加入元素后，不满足①②条件，则转换成linkedlist编码
LPUSH、RPUSH、LPOP、RPOP、LINDEX key index、LLEN、LINSERT key BEFORE|AFTER pivot(轴元素) value、
LREM key count value、LTRIM key start stop、LSET
3.哈希对象（hash）：可以使用ziplist或者hashtable来实现
如果以ziplist编码：调用三次HSET，加入3个键值对后，压缩链表内key1,value1,key2,value2,key3,value3保存了6个元素
①哈希对象保存的所有键值对的键和值的长度都小于64字节  &  ②哈希对象保存的键值对数量小于512，才使用ziplist实现
上限值可修改，在hash-max-ziplist-value和hash-max-ziplist-entries
当加入元素后，不满足①②条件，则转换成hashtable编码
HSET hash field value、HGET hash field、HEXISTS hash field、HDEL hash field [field …]、HLEN、HGETALL
4.集合对象（set）：可以使用intset或者hashtable来实现
①集合对象保存的所有元素都是整数值	& ②集合对象保存的元素数量不超过512个， 才使用intset实现
上限值可修改，set-max-intset-entries
当加入元素后，不满足①②条件，则转换成hashtable编码
SADD、SCARD（返回元素数量）、SISMEMBER、SMEMBERS、SRANDMEMBER、SPOP（随机删除一个元素并返回）、SREM key member
5.有序集合对象（zset）：可以使用ziplist或者skiplist来实现
如果使用ziplist编码：压缩链表保存成员1，分值1，成员2，分值2
如果使用skiplist编码
typedef struct zset {
	zskiplist *zsl;
	dict *dict;			//保存成员到分值的映射
} zset;
虽然既有跳跃表，又有字典，但是数据不重复，因为通过指针共享相同的成员和分值
①有序集合保存的元素数量小于128个 & ②有序集合保存的所有元素成员的长度都小于64字节，才使用ziplist实现
上限值可修改，在zset-max-ziplist-value和zset-max-ziplist-entries
当加入元素后，不满足①②条件，则转换成skiplist编码
ZADD key score member [[score member] [score member] …]、ZCARD key（返回元素数量）、ZCOUNT key min max（值范围内元素）、
ZRANGE key start stop [WITHSCORES]（index范围内递增）、ZREVRANGE key start stop [WITHSCORES]（index范围内递减）、
ZRANK key member（成员的正向排名）、ZREVRANK key member（成员的逆向排名）、
ZREM key member、ZSCORE key member
-----------------------------------------------------------------------------------------------------------------
(8)对象的使用
1.Redis中用于操作键的命令基本上可以分为两种类型：
①可对任何键
DEL删除、EXPIRE key seconds设置自动过期时间、RENAME重命名、TYPE类型、OBJECT命令等
②只能对特定类型的键：见（7）中描述，Redis在执行前会先做类型检查
2.内存回收
typedef struct redisObject {
	...
    int refcount;					// 引用计数
} robj;
创建一个新对象时，引用refcount初始化为1，被新程序使用+1，不在被一个程序使用-1，变为0时，释放
3.对象共享（只对包含整数值的字符串对象进行共享0-9999，不然判断相同太耗时了）
将数据库键的值指针指向一个现有的值对象，被共享的值对象的引用计数+1
创建共享字符串对象的数量可以通过修改redis.h/REDIS_SHARED_INTEGERS常量来修改
-----------------------------------------------------------------------------------------------------------------
第二部分、单机数据库的实现
(1)数据库
(2)RDB持久化
(3)AOF持久化
(4)事件
(5)客户端
(6)服务器
第三部分、多机数据库的实现
(1)复制
(2)Sentinel
(3)集群
第四部分、独立功能的实现
(1)发布与订阅
(2)事务
(3)Lua脚本
(4)排序
(5)二进制位数组
(6)慢查询日志
(7)监视器