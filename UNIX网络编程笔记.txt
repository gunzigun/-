下载: unpv13e.tar.gz（http://www.unpbook.com/src.html）
解压: tar xvf unpv13e.tar.gz
进入到unpv13e目录
./lib/unp.h 中#include "../config.h"改成#include "config-unp.h"
./lib/unp.h 中#include "../lib/addrinfo.h"改成#include "addrinfo-unp.h"
./lib/unp.h 加一行 #define MAX_LINE 2048
cp ./lib/unp.h /usr/include/
mv config.h config-unp.h
mv ./lib/addrinfo.h ./lib/addrinfo-unp.h
cp ./config-unp.h /usr/include/
cp ./lib/addrinfo-unp.h /usr/include/
进入lib里make，生成libunp.a
cp ./libapue.a /usr/local/lib/
编译时链接到相应库: gcc -o 1-1 1-1.c -l unp

1.简介
(1)编写协议无关的程序
socket(AF_INET/AF_INET6, SOCK_STREAM, 0);
使用getaddrinfo函数获取相关的地址和协议信息
---------------------------------------------------------------------------------------
2.TCP/IP协议族
IPv4、IPv6、TCP、UDP、
SCTP：可靠连接、全双工、每个关联的两端均涉及一组IP地址和一个端口号
ICMP：处理路由器和主机之间流通的错误和控制消息，由TCP/IP网络支持软件本身（非用户进程）产生和处理
IGMP：用于多播
DLPI：提供对于数据链路层的访问能力
(1)TCP生疏点
①流量控制：TCP总是告诉对端，在任何时刻，它一次能从对端接受多少字节的数据，这称为“通告窗口”（advertised windows）
数据被接受之后，窗口下次消息到来时，告诉对端，窗口变大了
②全双工：同时在两个方向上，既发送数据，有接受数据
(2)SCTP
①SCTP用“关联”取代“连接”，因为连接是两个地址之间，而关联是两个系统之间，可能是两组IP地址的通信
②SCTP是“面向消息”的，有点先并行的TCP，TCP一个阻塞全阻塞，SCTP一个流阻塞，其它流不受影响
(3)TCP的三次握手
服务器被动打开（socket，bind，listen），accept（阻塞，等待连接）
客户端主动打开socket，connect（阻塞，等待服务器同意），发动SYN-J（不携带数据）
服务器应答，ACK-J+1，SYN-K，connect返回
客户端告知服务器，应答已收到ACK-K+1，accept返回，read（阻塞）
(4)TCP（SYN）选项
MSS选项：告诉对端，最大分节大小
窗口规模选项：告诉对端，最大窗口是65535，16位
*****
【TCP的滑动窗口机制】基本的数据单位不是数据段，而是字节
每个窗口用三个指针表示，第一个指向窗口的第一个字节，第二个指向窗口中马上要发送的字节，第三个指向窗口的最后一个字节。
【累积确认】接收方对某个编号进行确认，该编号之前的数据必须都已接收到了，从而有时候前面窗口的数据没有接受到，就必须暂存数据，并在接收到前面的其他数据后进行累积确认
a）优点：允许发送方在对数据进行重发时发送更多的数据，无需对丢失的确认进行重发；为确认数据段也会丢失，但只要下一个确认能够到达对方就无需对前一个确认进行重发
b）缺点：若第一个窗口的数据丢失，则收到的确认好一直都是关于之前数据的确认，得不到关于新发送的数据包的确认；从而无法确定从该窗口开始的数据包哪些成功发送，哪些丢失了
【发送方窗口不能大于接收方窗口】，
凡是ACK 置为1 的数据段都应该将自己接收窗口的当前大小填入TCP数据段头部的窗口字段中，通知给发送方
【拥塞控制机制】慢启动和成倍减少；TCP 协议实际发送窗口的大小应该是拥塞窗口和接收方接收窗口中小的一个
a) 成倍减少机制：当TCP 发现数据段丢失（即超时重发）时，就将拥塞窗口的大小减少一半（但其大小至少应为1 ） ，对于减小窗口后仍在发送窗口中的数据段，将其重发的超时值延长一倍。
b) 慢启动机制：在TCP 启动一个新的连接或拥塞结束后，将拥塞窗口的大小设置为一个数据段的大小，然后每收到一个确认段，TCP 就将拥塞窗口的大小增加一个数据段；在拥塞发生并恢复后，通过慢启动机制使得拥塞窗口的大小达到了拥塞之前的一半，TCP 就启动一个拥塞避免机制以减缓窗口扩大的速度
【傻窗口症状】极端的情况，接收方的应用程序一直没有处理接收到的数据，这样接收方的TCP 缓冲区都被接收到的数据占满，接收窗口的大小减小为0，TCP 将这个窗口大小通知给发送方TCP，这时整个数据传输就停下来了
*****
时间戳选项：防止由失而复现的分组可能造成的数据损坏
(5)TCP的4次挥手（任一方可是是服务或客户）
客户端主动关闭close，发送FIN-M
服务端被动关闭，发送ACK-M+1，应答说明，收到了FIN-M
服务端把剩余数据发送完，关闭close，发送FIN-N
客户端应答ACK-N+1，说明，收到了FIN-N
(6)TIME_WAIT状态
2个MSL(maximum segment lifetime)最长分节生命期
MSL是任何IP数据包能在因特网中存在的最长时间
存在的理由：可靠的实现TCP全双工连接，允许老的重复分节在网络中消逝
(7)端口号（16位整数）
众所周知的端口号（0-1023）；21分配给FTP（面向连接的）服务，69分配给TFTP（面向数据报的）服务，80分配给Web服务
已登记的端口（1024-49151）：不受IANA（Internet Assigned Numbers Authority）控制，但是由其等级，方便使用
临时端口号（49152-65535，占所有的1/4）：不关心具体值，只要是唯一的即可
(8)监听套接字（12.106.32.254:21,*:*）、已连接套接字，fork进程1（-，IP:POTR1）fork进程2（-，IP:POTR2）
①一个分节来自206.168.112.219:1500，目的为12.106.32.254:21，则递送给第一个子进程
②一个分节来自206.168.112.219:1501，目的为12.106.32.254:21，则递送给第二个子进程
③目的为12.106.32.254:21的其它消息，则递送给父进程
(9)UDP首部8字节、TCP首部20字节，IPv4首部是20字节，IPv6首部40字节
IPv4数据报的最大大小65535（MTU），总长度字段16位
IPv5数据报的最大大小65575（MTU），净长度字段16位，65535+40=65575
----------------------------------------------------------------------------------------------------------------
3.套接字编程简介
(1)IPv4套接字地址结构
struct in_addr
{
	// in_addr_t 为 uint32_t，32位无符号整数
	in_addr_t s_addr;			/* 32-bit IPv4 address, network byte order */	
};
// 以上定义有历史原因，因为之前in_addr为多种结构的联合union，后面去除了
struct sockaddr_in
{
	uint8_t			sin_len;		/* length of structure (16) 无符号的8位整数 */
	// sa_family_t 为 uint8_t，8位无符号整数
	sa_family_t 	sin_family;		/* AF_INET 必须 */
	// in_port_t 为 uint16_t，16位无符号整数
	in_port_t		sin_port;		/* 16-bit TCP or UDP port number, network byte order 必须 */
	struct in_addr 	sin_addr;		/* 32-bit IPv4 address, network byte order 必须 */
	char 			sin_zero[8];	/* unused */
};
// socklen_t 为 uint32_t，32位无符号整数
(2)通用的套接字地址结构
struct sockaddr
{
	unit8_t 		sa_len;
	sa_family_t		sa_family;		/* address family: AF_xxx value */
	char 			sa_data[14];	/* protocol-specific address */
};
公用父类，这样便于bind函数泛化，int bind(int, struct sockaddr *, socklen_t);
(3)IPv6套接字地址结构
struct in6_addr
{
	uint8_t		s6_addr[16];		/* 128-bit IPv6 address, network byte ordered*/
};
#define SIN6_LEN		/* required for compile-time tests */
struct sockaddr_in6
{
	uint8_t 		sin6_len;		/* length of this struct (28) */
	sa_family_t		sin6_family;	/* AF_INET6 */
	in_port_t		sin6_port;		/* transport layer port, network byte order */
	uint32_t		sin6_flowinfo;  /* flow information, undefined */
	struct in6_addr sin6_addr;		/* IPv6 address, network byte order */
	uint32_t 		sin6_scope_id;	/* set of interfaces for a scope */
};
// 此结构中字段的先后顺序做过编排，使得其结构是64位对齐的。对64位机器做了兼容处理
(4)新的通用套接字地址结构
克服了sockaddr的缺点，足以容纳系统所支持的任何套接字地址结构
struct sockaddr_storage
{
	uint8 			ss_len;			/* length of this struct (implementation dependent) */
	sa_family_t 	ss_family;		/* address family: AF_xxx value */	
};
与sockaddr相比，有以下两点差别
①如果系统支持的任何套接字地址结构有对齐需要，那么sockaddr_storage能够满足最苛刻的对齐要求
②sockaddr_storage足够大，能够容纳系统支持的任何套接字地址结构
(5)UNIX域套接字
struct sockaddr_un
{
	uint8_t			sun_len;
	sa_family_t 	sun_family;		/* AF_UNIX */
	char 			sun_path[108];	/* pathname */
};
fd = socket(AF_UNIX, SOCK_STREAM, 0);
struct sockaddr_un un;
un.sun_family = AF_UNIX;
strcpy(un.sun_path, "foo.socket");
size = offsetof(struct sockaddr_un, sun_path) + strlen(un.sun_path);
// #define offsetof(TYPE,MEMBER) ((int)&((TYPE *)0)->MEMBER) 假定地址从0开始，这样子就可以得到前面部分的长度
bind(fd, (struct * sockaddr *)&un, size);	// 执行完后会在当前目录生成foo.socket文件，退出程序，不会删除，需要写代码
bind函数的第三参数是，第二参数整个结构的大小
(6)值-结果参数
从进程到内核传递套接字地址结构的函数：bind、connect、sendto
从内核到进程传递套接字地址结构的函数：accept、recvfrom、getsockname、getpeername
(7)字节序转换
uint32_t htonl(uint32_t hostint32);			// 主机字节序 转 网络字节序 32位
uint16_t htons(uint16_t hostint16);			// 主机字节序 转 网络字节序 16位
uint32_t ntohl(uint32_t netint32);			// 网络字节序 转 主机字节序 32位
uint16_t ntohs(uint16_t netint16);			// 网络字节序 转 主机字节序 16位
(8)字节操纵函数
void bzero(void *dest, size_t nbytes);
void bcopy(const void *src, void *dest, size_t nbytes);
int bcmp(const void *ptr1, const void *ptr2, size_t nbytes);
void *memset(void *dest, int c, size_t len);
void *memcpy(void *dest, const void *src, size_t nbytes);
int memcmp(const void *ptr1, const void *ptr2, size_t nbytes);
(9)地址转换函数
int inet_aton(const char *strptr, struct in_addr *addrptr);		// 将点分十进制数据地址转换成网络字节序地址
in_addr_t inet_addr(const char *strptr);						// 同上，但是不能表征255.255.255.255，已废弃
char* inet_ntoa(struct in_addr inaddr);							// 将网络字节序地址转换成点分十进制数据地址
// 以上函数只适用于IPv4
随IPv6出现的函数，对于IPv4地址和IPv6地址都适用，函数中p和n分别代表表达（presentation)和数值（numeric)。
地址的表达格式通常是ASCII字符串，数值格式则是存放到套接字地址结构的二进制值。
int inet_pton(int domain, const char *str, void *addr);     //将点分十进制的ip地址转化为用于网络传输的数值格式
返回值：若成功则为1，若输入不是有效的表达式则为0，若出错则为-1
const char* inet_ntop(int domain, const void* addr, char *str, size_t size);  //将数值格式转化为点分十进制的ip地址格式
返回值：若成功则为指向结构的指针，若出错则为NULL
注意：domain参数既可以是AF_INET（ipv4）也可以是AF_INET6（ipv6）
注意：所以以上两个函数，协议相关，为使协议不相关，可以自己定义一个函数
-------------------------------------------------------------------------------------------------------------
